name: "Build website"

inputs:
  SITE_FOLDER:
    required: false
    default: ""
  BASE_URL_PREFIX:
    required: false
    default: ""
  PREVIEW:
    required: false
    default: ""
  BRANCH:
    required: false
    default: "main"
  PYTHON_LIBS:
    required: false
    default: ""
  PLOTS:
    required: false
    default: ""
  LATEX:
    required: false
    default: false
  GNUPLOT:
    required: false
    default: false
  CLEAR_CACHE:
    required: false
    default: false
  CACHE_KEY:
    required: false
    default: "franklin-cache"
  TTFX:
    required: false
    default: false

runs:
  using: "composite"
  steps:
    # =========== #
    # CACHE SETUP #
    # =========== #

    - uses: actions/cache@v2
      with:
        path: |
              ${{ inputs.SITE_FOLDER }}/__cache
              ${{ inputs.SITE_FOLDER }}/__site
        key: ${{ runner.os }}-${{ inputs.CACHE_KEY }}-${{ github.sha }}
        restore-keys: ${{ runner.os }}-${{ inputs.CACHE_KEY }}-

    # ============ #
    # DEPENDENCIES #
    # ============ #

    # Python
    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
      if: ${{ inputs.PYTHON_LIBS != '' }}

    - run: '
           pip install ${{ inputs.PYTHON_LIBS }};
           export PYTHON=$(which python);
           '
      shell: bash
      if: ${{ inputs.PYTHON_LIBS != '' }}

    # Apt-get update if necessary
    - run: sudo apt-get update -qq
      shell: bash
      if: ${{ (inputs.PLOTS != '') || (inputs.LATEX) || (inputs.GNUPLOT) }}

    # QT dependencies for Plots with GR backend
    - run: sudo apt-get install -y qt5-default
      shell: bash
      if: ${{ inputs.PLOTS != '' }}

    # LaTeX* deps for PGFPlotsX etc
    - run: sudo apt install -y pdf2svg texlive-latex-base texlive-binaries texlive-pictures texlive-latex-extra texlive-luatex
      shell: bash
      if: ${{ inputs.LATEX }}

    # Gnuplot for Gaston etc
    - run: sudo apt-get install -y gnuplot
      shell: bash
      if: ${{ inputs.GNUPLOT }}

    # ================ #
    # BUILDING WEBSITE #
    # ================ #

    # Julia
    - uses: julia-actions/setup-julia@v1
      with:
        version: 1.7

    # Building website
    - run: ${{ inputs.PLOTS }} julia -e '
              using Pkg;
              isempty("${{ inputs.PYTHON_LIBS }}") || (Pkg.add("PyCall"); Pkg.build("PyCall"););
              Pkg.add(
                url="https://github.com/tlienart/Xranklin.jl",
                rev="${{ inputs.BRANCH }}"
                );
              using Xranklin;
              build("${{ inputs.SITE_FOLDER }}";
                    clear=${{ inputs.CLEAR_CACHE }},
                    prefix=joinpath(
                      "${{ inputs.BASE_URL_PREFIX }}",
                      "${{ inputs.PREVIEW }}"
                      )
                    );'
      shell: bash

    # ============================ #
    # TTFX (only for Xranklin dev) #
    # ============================ #

    # TTFX Experiment results
    - uses: actions/checkout@v2
      with:
        ref: gh-ttfx
        path: ttfx
      if: ${{ inputs.TTFX }}

    # OR pipe ensures continue on fail
    - run: '
           rm -rf ${{ inputs.SITE_FOLDER }}/__site/ttfx || true;
           mv ttfx/ttfx ${{ inputs.SITE_FOLDER }}/__site/. || true;
           '
      shell: bash
      if: ${{ inputs.TTFX }}

    # ========== #
    # DEPLOYMENT #
    # ========== #

    # Deployment
    - run: touch ${{ inputs.SITE_FOLDER }}/__site/.nojekyll
      shell: bash

    - uses: JamesIves/github-pages-deploy-action@releases/v4
      with:
        BRANCH: gh-pages
        FOLDER: ${{ inputs.SITE_FOLDER }}/__site
        TARGET-FOLDER: "${{ inputs.PREVIEW }}"
